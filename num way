int N = 1010, mod = (int) 1e9 + 7;
int[][] C = new int[N][N];
public int numOfWays(int[] nums) {
    int n = nums.length;
    initComb(n);
    List<Integer> list = new ArrayList<>();
    for (int i = 0; i < n; i++) {
        list.add(nums[i]);
    }
    return f(list) - 1;
}

public int f(List<Integer> list) {
    if (list.isEmpty()) return 1;
    List<Integer> left = new ArrayList<>();
    List<Integer> right = new ArrayList<>();
    int n = list.size();
    int r = list.get(0);
    for (int i = 1; i < n; i++) {
        if (list.get(i) <= r) left.add(list.get(i));
        else right.add(list.get(i));
    }
    //  left
    //C n-1  * f(left) * f(right)
    //
    // n - 1 is except for the root node
    long res = (long) C[n - 1][left.size()] * f(left) % mod * f(right) % mod;
    return (int) res;
}


public void initComb(int n) {
    for (int a = 0; a <= n; a++) {
        for (int b = 0; b <= a; b++) {
            if (b == 0) C[a][b] = 1;
            else {
                //   b      b-1     b
                // C a  = C a-1 + C a - 1
                C[a][b] = (C[a - 1][b] + C[a - 1][b - 1]) % mod;
            }
        }
    }
}
