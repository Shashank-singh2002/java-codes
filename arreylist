import java.util.ArrayList;

class GFG {
    ArrayList<Integer> find(int arr[], int n, int x) {
        ArrayList<Integer> result = new ArrayList<Integer>();
        
        // Initialize variables to store the first and last occurrences
        int firstOccurrence = -1;
        int lastOccurrence = -1;

        // Binary search to find the first occurrence
        int left = 0;
        int right = n - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (arr[mid] == x) {
                firstOccurrence = mid;
                right = mid - 1; // Continue searching on the left side
            } else if (arr[mid] < x) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        // Binary search to find the last occurrence
        left = 0;
        right = n - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (arr[mid] == x) {
                lastOccurrence = mid;
                left = mid + 1; // Continue searching on the right side
            } else if (arr[mid] < x) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        // Add the first and last occurrence to the result ArrayList
        result.add(firstOccurrence);
        result.add(lastOccurrence);

        return result;
    }
}
